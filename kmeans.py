# -*- coding: utf-8 -*-
"""KMeans.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v4r1R314lou2dzVFhediyJY-CrfDB-Bb
"""

"""## Importing Modules"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from mpl_toolkits.mplot3d import Axes3D
import sys

"""## Data Preprocessing"""

df = pd.read_csv(sys.argv[1])
df.head()
df.min()

df.max()

df.drop_duplicates(subset= None, keep = 'first', inplace = False)

df.drop(columns=["CustomerID"], inplace = True)

df.shape

"""## Data Analysis

Box Plots
"""

plt.figure(figsize=(15,6))
plt.subplot(1,2,1)
sns.boxplot(y=df["Spending Score"], color="green")
plt.subplot(1,2,2)
sns.boxplot(y=df["Annual Income"], color = "red")
plt.show()

"""Bar Plots"""

genders = df.Gender.value_counts()
sns.set_style("whitegrid")
plt.figure(figsize=(10,4))
sns.barplot(x=genders.index, y=genders.values)
plt.show()

"""Age Group Distribution Plot"""

age18_25 = df.Age[(df.Age <= 25) & (df.Age >= 18)]
age26_35 = df.Age[(df.Age <= 35) & (df.Age >= 26)]
age36_45 = df.Age[(df.Age <= 45) & (df.Age >= 36)]
age46_55 = df.Age[(df.Age <= 55) & (df.Age >= 46)]
age55above = df.Age[df.Age >= 56]

x = ["18-25","26-35","36-45","46-55","55+"]
y = [len(age18_25.values),len(age26_35.values),len(age36_45.values),len(age46_55.values),len(age55above.values)]

plt.figure(figsize=(15,8))
sns.barplot(x=x, y=y, palette="Paired")
plt.title("Age Group vs Number of Customers")
plt.xlabel("Age")
plt.ylabel("Number of Customer")
plt.show()

"""Spending Score Distribution Plot"""

spsc1_20 = df["Spending Score"][(df["Spending Score"] >= 1) & (df["Spending Score"] <= 20)]
spsc21_40 = df["Spending Score"][(df["Spending Score"] >= 21) & (df["Spending Score"] <= 40)]
spsc41_60 = df["Spending Score"][(df["Spending Score"] >= 41) & (df["Spending Score"] <= 60)]
spsc61_80 = df["Spending Score"][(df["Spending Score"] >= 61) & (df["Spending Score"] <= 80)]
spsc81_100 = df["Spending Score"][(df["Spending Score"] >= 81) & (df["Spending Score"] <= 100)]

spscx = ["1-20", "21-40", "41-60", "61-80", "81-100"]
spscy = [len(spsc1_20.values), len(spsc21_40.values), len(spsc41_60.values), len(spsc61_80.values), len(spsc81_100.values)]

plt.figure(figsize=(15,6))
sns.barplot(x=spscx, y=spscy, palette="Set2")
plt.title("Spending Scores")
plt.xlabel("Score")
plt.ylabel("Spending Score Group vs Number of Customers")
plt.show()

"""Annual Income Distribution Plot"""

ai0_30 = df["Annual Income"][(df["Annual Income"] >= 0) & (df["Annual Income"] <= 30)]
ai31_60 = df["Annual Income"][(df["Annual Income"] >= 31) & (df["Annual Income"] <= 60)]
ai61_90 = df["Annual Income"][(df["Annual Income"] >= 61) & (df["Annual Income"] <= 90)]
ai91_120 = df["Annual Income"][(df["Annual Income"] >= 91) & (df["Annual Income"] <= 120)]
ai121_150 = df["Annual Income"][(df["Annual Income"] >= 121) & (df["Annual Income"] <= 150)]

aix = ["$ 0 - 30,000", "$ 30,001 - 60,000", "$ 60,001 - 90,000", "$ 90,001 - 120,000", "$ 120,001 - 150,000"]
aiy = [len(ai0_30.values), len(ai31_60.values), len(ai61_90.values), len(ai91_120.values), len(ai121_150.values)]

plt.figure(figsize=(15,6))
sns.barplot(x=aix, y=aiy, palette="nipy_spectral_r")
plt.title("Annual Incomes")
plt.xlabel("Income")
plt.ylabel("Number of Customer")
plt.show()

"""# Clustering the Data (K-Means)

Finding K using the Elbow Method
"""

inertia = []
for k in range(1,21):
    kmeans = KMeans(n_clusters=k, init="k-means++")
    kmeans.fit(df.iloc[:,1:])
    inertia.append(kmeans.inertia_)
plt.figure(figsize=(15,6))    
plt.grid()
plt.plot(range(1,21),inertia, linewidth=2, color="blue", marker ="8")
plt.xlabel("K Value")
plt.xticks(np.arange(1,21,1))
plt.ylabel("Within Cluster Sum of Squares")
plt.show()

"""K = 5

3D Scatter Plot
"""

km = KMeans(n_clusters=5)
clusters = km.fit_predict(df.iloc[:,1:])
df["label"] = clusters
 
fig = plt.figure(figsize=(20,10))
ax = fig.add_subplot(111, projection='3d')
ax.scatter(km.cluster_centers_[:,0] ,km.cluster_centers_[:,1],km.cluster_centers_[:,2], color = 'red', s = 500, edgecolor= "red")
ax.scatter(km.cluster_centers_[:,0] ,km.cluster_centers_[:,1],km.cluster_centers_[:,2], color = 'red', s = 500, edgecolor = "red")
ax.scatter(df.Age[df.label == 0], df["Annual Income"][df.label == 0], df["Spending Score"][df.label == 0], c='blue', s=60)
ax.scatter(df.Age[df.label == 1], df["Annual Income"][df.label == 1], df["Spending Score"][df.label == 1], c='pink', s=60)
ax.scatter(df.Age[df.label == 2], df["Annual Income"][df.label == 2], df["Spending Score"][df.label == 2], c='green', s=60)
ax.scatter(df.Age[df.label == 3], df["Annual Income"][df.label == 3], df["Spending Score"][df.label == 3], c='orange', s=60)
ax.scatter(df.Age[df.label == 4], df["Annual Income"][df.label == 4], df["Spending Score"][df.label == 4], c='purple', s=60)
ax.view_init(30, 185)
plt.title("Red datapoints are Cluster Centers")
plt.xlabel("Age")
plt.ylabel("Annual Income")
ax.set_zlabel('Spending Score')
plt.show()

df.Age[df.label == 0]

df["Annual Income"][df.label == 0]

df["Spending Score"][df.label == 0]

"""Exporting the first cluster"""

vertical_stack = pd.concat([df.Age[df.label == 0], df["Annual Income"][df.label == 0], df["Spending Score"][df.label == 0] ], axis=1)
vertical_stack.to_csv("./Cluster1.csv")

"""Exporting the second cluster"""

vertical_stack = pd.concat([df.Age[df.label == 1], df["Annual Income"][df.label == 1], df["Spending Score"][df.label == 1] ], axis=1)
vertical_stack.to_csv("./Cluster2.csv")

"""Exporting the third cluster"""

vertical_stack = pd.concat([df.Age[df.label == 2], df["Annual Income"][df.label == 2], df["Spending Score"][df.label == 2] ], axis=1)
vertical_stack.to_csv("./Cluster3.csv")

"""Exporting the fourth cluster"""

vertical_stack = pd.concat([df.Age[df.label == 3], df["Annual Income"][df.label == 3], df["Spending Score"][df.label == 3] ], axis=1)
vertical_stack.to_csv("Cluster4.csv")

"""Exporting the fifth cluster"""

vertical_stack = pd.concat([df.Age[df.label == 4], df["Annual Income"][df.label == 4], df["Spending Score"][df.label == 4] ], axis=1)
vertical_stack.to_csv("Cluster5.csv")